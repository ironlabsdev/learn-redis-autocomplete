// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOAuthIdentity = `-- name: CreateOAuthIdentity :one
INSERT INTO oauth_identities (user_id, provider, id_token, email, raw_data)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, provider, id_token, email, raw_data, created_at, last_used_at
`

type CreateOAuthIdentityParams struct {
	UserID   pgtype.UUID
	Provider string
	IDToken  []byte
	Email    string
	RawData  []byte
}

// noinspection SqlResolve
func (q *Queries) CreateOAuthIdentity(ctx context.Context, arg CreateOAuthIdentityParams) (OauthIdentity, error) {
	row := q.db.QueryRow(ctx, createOAuthIdentity,
		arg.UserID,
		arg.Provider,
		arg.IDToken,
		arg.Email,
		arg.RawData,
	)
	var i OauthIdentity
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.IDToken,
		&i.Email,
		&i.RawData,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, full_name, avatar_url)
VALUES ($1, $2, $3)
RETURNING id, email, full_name, avatar_url, created_at, updated_at
`

type CreateUserParams struct {
	Email     pgtype.Text
	FullName  pgtype.Text
	AvatarUrl pgtype.Text
}

// noinspection SqlResolve
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.FullName, arg.AvatarUrl)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOAuthIdentityByProviderAndToken = `-- name: GetOAuthIdentityByProviderAndToken :one
SELECT id, user_id, provider, id_token, email, raw_data, created_at, last_used_at
FROM oauth_identities
WHERE provider = $1
  AND id_token = $2
`

type GetOAuthIdentityByProviderAndTokenParams struct {
	Provider string
	IDToken  []byte
}

// noinspection SqlResolve
func (q *Queries) GetOAuthIdentityByProviderAndToken(ctx context.Context, arg GetOAuthIdentityByProviderAndTokenParams) (OauthIdentity, error) {
	row := q.db.QueryRow(ctx, getOAuthIdentityByProviderAndToken, arg.Provider, arg.IDToken)
	var i OauthIdentity
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.IDToken,
		&i.Email,
		&i.RawData,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, full_name, avatar_url, created_at, updated_at
FROM users
WHERE email = $1
`

// noinspection SqlResolve
func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
